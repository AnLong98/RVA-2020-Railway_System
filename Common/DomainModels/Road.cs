///////////////////////////////////////////////////////////
//  Road.cs
//  Implementation of the Class Road
//  Generated by Enterprise Architect
//  Created on:      30-Jul-2020 3:49:33 PM
//  Original author: mixa
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.ComponentModel.DataAnnotations.Schema;
using System.Runtime.Serialization;
using System.ComponentModel.DataAnnotations;
using Common.Contracts;
using System.Linq;

namespace Common.DomainModels
{

    [DataContract]
    public class Road : IInternalValidation, IDeepCloneable<Road>
    {

        private int id;
        private string label;
        private string name;

        /// 
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="label"></param>
        /// <param name="stations"></param>
        public Road(int id, string name, string label, List<Station> stations)
        {
            this.id = id;
            this.name = name;
            this.label = label;
            this.Stations = stations;
        }

        public Road()
        {
            id = 0;
            name = "";
            label = "";
            Stations = new List<Station>();

        }

        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember]
        public int Id
        {
            get
            {
                return id;
            }
            set
            {
                id = value;
            }
        }

        public bool IsValid()
        {

            return id >= 0 && name.Length >= 3 && label.Length >= 2;
        }

        public Road DeepCopy()
        {
            Road copy = new Road();
            copy.Id = Id;
            copy.Name = Name;
            copy.Label = Label;
            if(Stations != null)
            {
                copy.Stations = Stations.ToList().ConvertAll(road => road.DeepCopy());
            }

            return copy;
        }

        [Column(TypeName = "varchar"), MinLength(3)]
        [DataMember]
        public string Label
        {
            get
            {
                return label;
            }
            set
            {
                label = value;
            }
        }

        [Column(TypeName = "varchar"), MinLength(3)]
        [DataMember]
        public string Name
        {
            get
            {
                return name;
            }
            set
            {
                name = value;
            }
        }

        [DataMember]
        public virtual IList<Station> Stations { get; set; }
    }//end Road
}