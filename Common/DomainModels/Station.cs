///////////////////////////////////////////////////////////
//  Station.cs
//  Implementation of the Class Station
//  Generated by Enterprise Architect
//  Created on:      30-Jul-2020 3:49:33 PM
//  Original author: mixa
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.ComponentModel.DataAnnotations.Schema;
using System.Runtime.Serialization;
using System.ComponentModel.DataAnnotations;
using Common.Contracts;
using System.Linq;

namespace Common.DomainModels
{

    [DataContract]
    public class Station : IInternalValidation, IDeepCloneable<Station>
    {

        private int id;
        private string name;
        private int trackNumber;

        /// 
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="trackNumber"></param>
        /// <param name="tracks"></param>
        /// <param name="place"></param>
        public Station(int id, string name, int trackNumber, List<Track> tracks, Place place, List<Road> roads)
        {
            this.id = id;
            this.name = name;
            this.trackNumber = trackNumber;
            this.Tracks = tracks;
            this.Place = place;
            this.Roads = roads;
        }

        public Station()
        {
            Id = 0;
            Name = "";
            TrackNumber = 0;
            Tracks = new List<Track>();
        }

        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember]
        public int Id
        {
            get
            {
                return id;
            }
            set
            {
                id = value;
            }
        }

        public bool IsValid()
        {

            return id >= 0 && name.Length >= 3 && Place != null;
        }

        public Station DeepCopy()
        {
            Station copy = new Station();

            copy.id = id;
            copy.name = name;
            copy.trackNumber = trackNumber;
            if(Place != null)
            {
                copy.Place = Place.DeepCopy();
            }
            if(Tracks != null)
            {
                copy.Tracks = Tracks.ToList().ConvertAll(track => track.DeepCopy());
            }

            return copy;
        }

        [Column(TypeName = "varchar"), MinLength(3)]
        [DataMember]
        public string Name
        {
            get
            {
                return name;
            }
            set
            {
                name = value;
            }
        }

        [DataMember]
        public int TrackNumber
        {
            get
            {
                return trackNumber;
            }
            set
            {
                trackNumber = value;
            }
        }

        [DataMember]
        public virtual Place Place { get; set; }
        [DataMember]
        public virtual IList<Track> Tracks { get; set; }
        [IgnoreDataMember]
        public virtual IList<Road> Roads { get; set; }
    }//end Station
}