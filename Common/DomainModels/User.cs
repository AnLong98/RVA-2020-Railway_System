///////////////////////////////////////////////////////////
//  User.cs
//  Implementation of the Class User
//  Generated by Enterprise Architect
//  Created on:      30-Jul-2020 3:49:34 PM
//  Original author: Predrag
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.ComponentModel.DataAnnotations.Schema;
using System.Runtime.Serialization;
using System.ComponentModel.DataAnnotations;
using Common.Contracts;

namespace Common.DomainModels
{
    [DataContract]
    public class User : IInternalValidation, IDeepCloneable<User>
    {

        private int id;
        private bool isAdmin;
        private string lastName;
        private string name;
        private string username;
        private string password;


        /// 
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="lastName"></param>
        /// <param name="password"></param>
        /// <param name="isAdmin"></param>
        public User(int id, string name, string username, string lastName, string password, bool isAdmin)
        {
            this.id = id;
            this.name = name;
            this.username = username;
            this.lastName = lastName;
            this.password = password;
            this.isAdmin = isAdmin;
        }

        public User()
        {
            ID = 0;
            Name = "";
            LastName = "";
            UserName = "";
            Password = "";
            IsAdmin = false;
        }

        public bool CheckPassword(string password)
        {
            if (password != this.password) return false;
            return true;
        }

        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember]
        public int ID
        {
            get
            {
                return id;
            }
            set
            {
                id = value;
            }
        }

        [DataMember]
        public bool IsAdmin
        {
            get
            {
                return isAdmin;
            }
            set
            {
                isAdmin = value;
            }
        }

        public bool IsValid()
        {

            return id >= 0 && name.Length >= 3 && username.Length >= 3 && lastName.Length >= 3 && password.Length >= 3;
        }

        public User DeepCopy()
        {
            User copy =  new User();
            copy.id = id;
            copy.UserName = UserName;
            copy.Name = Name;
            copy.LastName = LastName;
            copy.Password = Password;
            copy.IsAdmin = IsAdmin;

            return copy;
        }

        [Column(TypeName = "varchar"), MinLength(3)]
        [DataMember]
        public string LastName
        {
            get
            {
                return lastName;
            }
            set
            {
                lastName = value;
            }
        }

        [Column(TypeName = "varchar"), MinLength(3)]
        [DataMember]
        public string Name
        {
            get
            {
                return name;
            }
            set
            {
                name = value;
            }
        }

        [Column(TypeName = "varchar"), MinLength(3)]
        [DataMember]
        public string Password
        {
            get
            {
                return password;
            }
            set
            {
                password = value;
            }
        }

        [Column(TypeName = "varchar"), MinLength(3)]
        [DataMember]
        public string UserName
        {
            get
            {
                return username;
            }
            set
            {
                username = value;
            }
        }
    }//end User
}