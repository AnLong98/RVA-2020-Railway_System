///////////////////////////////////////////////////////////
//  Place.cs
//  Implementation of the Class Place
//  Generated by Enterprise Architect
//  Created on:      30-Jul-2020 3:49:33 PM
//  Original author: mixa
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.ComponentModel.DataAnnotations.Schema;
using System.Runtime.Serialization;
using System.ComponentModel.DataAnnotations;
using Common.Contracts;
using Common.DomainModels;

namespace Common.DomainModels
{

    [DataContract]
    public class Place : IInternalValidation, IDeepCloneable<Place>
    {

        private Country country;
        private int id;
        private string name;


        /// 
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="country"></param>
        public Place(int id, string name, Country country)
        {
            this.id = id;
            this.name = name;
            this.country = country;
        }

        public Place()
        {
            id = 0;
            Name = "";
        }

        [DataMember]
        public Country Country
        {
            get
            {
                return country;
            }
            set
            {
                country = value;
            }
        }

        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember]
        public int Id
        {
            get
            {
                return id;
            }
            set
            {
                id = value;
            }
        }

        public bool IsValid()
        {

            return id >= 0 && name.Length >= 3 && country != null;
        }

        public Place DeepCopy()
        {
            Place copy = new Place();
            copy.id = id;
            copy.name = name;
            if(country != null)
            {
                copy.country = country.DeepCopy();
            }


            return copy;
        }

        [Column(TypeName = "varchar"), MinLength(3)]
        [DataMember]
        public string Name
        {
            get
            {
                return name;
            }
            set
            {
                name = value;
            }
        }

    }//end Place
}