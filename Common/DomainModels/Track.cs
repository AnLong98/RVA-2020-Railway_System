///////////////////////////////////////////////////////////
//  Track.cs
//  Implementation of the Class Track
//  Generated by Enterprise Architect
//  Created on:      30-Jul-2020 3:49:33 PM
//  Original author: mixa
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.ComponentModel.DataAnnotations.Schema;
using System.Runtime.Serialization;
using System.ComponentModel.DataAnnotations;
using Common.Contracts;

namespace Common.DomainModels
{

    [DataContract]
    public class Track : IInternalValidation, IDeepCloneable<Track>
    {

        private EntranceType entrance = EntranceType.LEFT;
        private int id;
        private string label;
        private string name;
        private int? stationId;

        /// 
        /// <param name="id"></param>
        /// <param name="label"></param>
        /// <param name="name"></param>
        /// <param name="entrance"></param>
        public Track(int id, string label, string name, EntranceType entrance)
        {
            this.id = id;
            this.name = name;
            this.label = label;
            this.entrance = entrance;
        }

        public Track()
        {
            id = 0;
            Name = "";
            label = "";
            Entrance = EntranceType.LEFT;
        }

        [DataMember]
        public EntranceType Entrance
        {
            get
            {
                return entrance;
            }
            set
            {
                entrance = value;
            }
        }

        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember]
        public int Id
        {
            get
            {
                return id;
            }
            set
            {
                id = value;
            }
        }

        public bool IsValid()
        {

            return id >= 0 && name.Length >= 3 && label.Length == 3;
        }

        public Track DeepCopy()
        {
            Track copy = new Track();
            copy.id = id;
            copy.name = name;
            copy.label = label;
            copy.entrance = entrance;

            return copy;
        }

        [Column(TypeName = "varchar"), StringLength(3, MinimumLength = 3)]
        [DataMember]
        public string Label
        {
            get
            {
                return label;
            }
            set
            {
                label = value;
            }
        }

        [Column(TypeName = "varchar"), MinLength(3)]
        [DataMember]
        public string Name
        {
            get
            {
                return name;
            }
            set
            {
                name = value;
            }
        }

        [DataMember]
        public int? StationId
        {
            get
            {
                return stationId;
            }
            set
            {
                stationId = value;
            }
        }
    }//end Track
}