///////////////////////////////////////////////////////////
//  PlutoContext.cs
//  Implementation of the Class PlutoContext
//  Generated by Enterprise Architect
//  Created on:      30-Jul-2020 3:54:36 PM
//  Original author: Predrag
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Data.Entity;
using Common.DomainModels;

namespace Server.Database
{

    public class RailwayContext : DbContext
    {

        private DbSet<Country> countries;
        private DbSet<Place> places;
        private DbSet<Road> roads;
        private DbSet<Station> stations;
        private DbSet<Track> tracks;
        private DbSet<User> users;

        public RailwayContext() : base("Database")
        {
            this.Configuration.LazyLoadingEnabled = true;
            this.Configuration.ProxyCreationEnabled = false; //Required for WCF virtual properties serialization
        }

        public DbSet<Country> Countries
        {
            get
            {
                return countries;
            }
            set
            {
                countries = value;
            }
        }

        public DbSet<Place> Places
        {
            get
            {
                return places;
            }
            set
            {
                places = value;
            }
        }

        public DbSet<Road> Roads
        {
            get
            {
                return roads;
            }
            set
            {
                roads = value;
            }
        }

        public DbSet<Station> Stations
        {
            get
            {
                return stations;
            }
            set
            {
                stations = value;
            }
        }

        public DbSet<Track> Track
        {
            get
            {
                return tracks;
            }
            set
            {
                tracks = value;
            }
        }

        public DbSet<User> Users
        {
            get
            {
                return users;
            }
            set
            {
                users = value;
            }
        }

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {

            modelBuilder.Entity<User>().HasIndex(u => u.UserName).IsUnique();       //Make username unique field for user
            modelBuilder.Entity<Country>().HasIndex(c => c.Name).IsUnique();        //Make name unique field for country
                                                                                    //Make label unique for road 
            modelBuilder.Entity<Station>().HasIndex(s => s.Name).IsUnique();        //Make name unique for station
            modelBuilder.Entity<Track>().HasIndex(s => s.Label).IsUnique();         //Make label unique for track

            modelBuilder.Entity<Place>().HasRequired(t => t.Country).WithMany().WillCascadeOnDelete(true);               //Make country nullable primary key
            modelBuilder.Entity<Station>().HasMany(t => t.Tracks).WithOptional();   //Make Tracks have nullable primary key to station
            modelBuilder.Entity<Station>().HasRequired(t => t.Place).WithMany();    //Make Station have nullable primary key to place
            modelBuilder.Entity<Station>().HasMany(t => t.Roads).WithMany(t => t.Stations).Map(t =>
            {
                t.MapLeftKey("StationID");
                t.MapRightKey("RoadID");
                t.ToTable("RoadStations");
            });                                                                      //Make Station have nullable primary key to place
        }

    }
}