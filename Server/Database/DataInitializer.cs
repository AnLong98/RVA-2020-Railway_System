///////////////////////////////////////////////////////////
//  DataInitializer.cs
//  Implementation of the Class DataInitializer
//  Generated by Enterprise Architect
//  Created on:      02-Aug-2020 7:12:01 PM
//  Original author: Predrag
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using Server.Contracts;
using Common.Contracts;
using Common.DomainModels;

namespace Server.Database
{

    public class DataInitializer
    {
        private ILogging logger;
        private IDatabaseContextFactory factory;

        public DataInitializer(ILogging logger, IDatabaseContextFactory factory)
        {
            this.logger = logger;
            this.factory = factory;
        }

        public void InitializeData()
        {
            InitializeCountries();
            InitializePlaces();
            InitializeTracks();
            InitializeStations();
            InitializeRoads();
            InitializeUsers();
        }


        private void InitializeCountries()
        {
            //Initialize countries, countries were retrieved from https://textlists.info/geography/countries-of-the-world/
            logger.LogNewMessage($"Initializing countries..", LogType.INFO);


            try
            {
                var fileContent = File.ReadAllLines("countries.txt");
                var worldCountries = new List<string>(fileContent);
                logger.LogNewMessage($"Fetching countries from repository", LogType.DEBUG);
                using (var dbContext = factory.GetContext())
                {
                    var countries = dbContext.Countries.ToList();

                    List<Country> countriesToAdd = new List<Country>();
                    foreach (string countryName in worldCountries)
                    {
                        if (countries.Where(x => x.Name == countryName).Count() == 0) countriesToAdd.Add(new Country(0, countryName));

                    }

                    if (countriesToAdd.Count > 0) dbContext.Countries.AddRange(countriesToAdd);
                    dbContext.SaveChanges();

                    logger.LogNewMessage($"Countries intialized successfully.", LogType.INFO);
                }
            }
            catch (Exception ex)
            {
                logger.LogNewMessage($"Error occured trying to intialize countries. Message {ex.Message}", LogType.ERROR);

            }
        }

        private void InitializePlaces()
        {
            //Initialize places
            try
            {
                logger.LogNewMessage($"Initializing places..", LogType.INFO);
                using (var dbContext = factory.GetContext())
                {
                    List<Place> places = new List<Place>
                    {
                        new Place(0, "Belgrade", dbContext.Countries.First(t => t.Name == "Serbia")),
                        new Place(0, "Novi Sad", dbContext.Countries.First(t => t.Name == "Serbia")),
                        new Place(0, "Zagreb", dbContext.Countries.First(t => t.Name == "Croatia")),
                        new Place(0, "Xinjiang", dbContext.Countries.First(t => t.Name == "China"))
                    };

                    logger.LogNewMessage($"Fetching places from repository", LogType.DEBUG);

                    var existingPlaces = dbContext.Places.ToList();
                    List<Place> placesToAdd = new List<Place>();

                    foreach (Place p in places)
                    {
                        if (existingPlaces.Where(x => x.Name == p.Name).Count() == 0) placesToAdd.Add(p);
                    }

                    dbContext.Places.AddRange(placesToAdd);
                    dbContext.SaveChanges();
                    logger.LogNewMessage($"Places intialized successfully.", LogType.INFO);
                }

            }
            catch (Exception ex)
            {
                logger.LogNewMessage($"Error occured trying to intialize places. Message {ex.Message}", LogType.ERROR);
            }

        }


        private void InitializeTracks()
        {
            //Initialize tracks
            logger.LogNewMessage($"Initializing tracks..", LogType.INFO);

            List<Track> tracks = new List<Track>
            {
                new Track(0, "123", "Mirogojnica", EntranceType.LEFT),
                new Track(0, "2bf", "Retardevica", EntranceType.RIGHT),
                new Track(0, "cgt", "Kuharevica", EntranceType.LEFT),
                new Track(0, "12k", "Muqin", EntranceType.LEFT),
                new Track(0, "12g", "Tian", EntranceType.LEFT),
                new Track(0, "3f5", "Franjovnica", EntranceType.RIGHT),
                new Track(0, "dsf", "disigari", EntranceType.LEFT)
            };

            try
            {
                logger.LogNewMessage($"Fetching tracks from repository", LogType.DEBUG);
                using (var dbContext = factory.GetContext())
                {

                    var existingTracks = dbContext.Track.ToList();
                    List<Track> tracksToAdd = new List<Track>();

                    foreach (Track t in tracks)
                    {
                        if (existingTracks.Where(x => x.Label == t.Label).Count() == 0) tracksToAdd.Add(t);
                    }

                    dbContext.Track.AddRange(tracksToAdd);
                    dbContext.SaveChanges();
                    logger.LogNewMessage($"Tracks intialized successfully.", LogType.INFO);

                }
            }
            catch (Exception ex)
            {
                logger.LogNewMessage($"Error occured trying to intialize tracks. Message {ex.Message}", LogType.ERROR);
            }

        }


        private void InitializeStations()
        {
            //Initialize stations
            logger.LogNewMessage($"Initializing stations..", LogType.INFO);

            try
            {
                logger.LogNewMessage($"Fetching stations from repository", LogType.DEBUG);

                using (var dbContext = factory.GetContext())
                {
                    var existingStations = dbContext.Stations.ToList();
                    var existingTracks = dbContext.Track.ToList();
                    List<Station> stationsToAdd = new List<Station>();
                    List<Station> stations = new List<Station>();
                    List<Track> prokopTracks = new List<Track>
                    {
                        existingTracks.Where(x => x.Label == "cgt").First()
                    };
                    var prokopPlace = dbContext.Places.SingleOrDefault(x => x.Name == "Belgrade");
                    stations.Add(new Station(0, "Prokop", 1, prokopTracks, prokopPlace, new List<Road>()));

                    List<Track> glavniKolodvorTracks = new List<Track>
                    {
                        existingTracks.Where(x => x.Label == "2bf").First(),
                        existingTracks.Where(x => x.Label == "123").First(),
                        existingTracks.Where(x => x.Label == "3f5").First()

                    };
                    var glavniKolodvorPlace = dbContext.Places.SingleOrDefault(x => x.Name == "Zagreb");
                    stations.Add(new Station(0, "Glavni Kolodvor", 3, glavniKolodvorTracks, glavniKolodvorPlace, new List<Road>()));

                    List<Track> xinjiangTracks = new List<Track>
                    {
                        existingTracks.Where(x => x.Label == "12k").First(),
                        existingTracks.Where(x => x.Label == "12g").First()
                    };
                    var houchezhanPlace = dbContext.Places.SingleOrDefault(x => x.Name == "Xinjiang");
                    stations.Add(new Station(0, "Huochezhan", 2, xinjiangTracks, houchezhanPlace, new List<Road>()));

                    List<Track> noviSadTracks = new List<Track>
                    {
                        existingTracks.Where(x => x.Label == "dsf").First()
                    };
                    var nsPlace = dbContext.Places.SingleOrDefault(x => x.Name == "Xinjiang");
                    stations.Add(new Station(0, "Novosadska zeleznicka stanica", 2, noviSadTracks, nsPlace, new List<Road>()));

                    foreach (Station s in stations)
                    {
                        if (existingStations.Where(x => x.Name == s.Name).Count() == 0) stationsToAdd.Add(s);
                    }

                    dbContext.Stations.AddRange(stationsToAdd);
                    dbContext.SaveChanges();
                    logger.LogNewMessage($"Stations intialized successfully.", LogType.INFO);
                }
            }
            catch (Exception ex)
            {
                logger.LogNewMessage($"Error occured trying to intialize stations. Message {ex.Message}", LogType.ERROR);
            }

        }

        private void InitializeRoads()
        {
            //Initialize roads
            logger.LogNewMessage($"Initializing roads..", LogType.INFO);

            try
            {
                using (var dbContext = factory.GetContext())
                {

                    logger.LogNewMessage($"Fetching roads from repository", LogType.DEBUG);

                    var existingRoads = dbContext.Roads.ToList();
                    var existingStations = dbContext.Stations.ToList();
                    List<Road> roadsToAdd = new List<Road>();
                    List<Road> roads = new List<Road>();
                    List<Station> balkanStations = new List<Station>
                    {
                        existingStations.Where(x => x.Name == "Prokop").First(),
                        existingStations.Where(x => x.Name == "Glavni Kolodvor").First(),
                        existingStations.Where(x => x.Name == "Novosadska zeleznicka stanica").First()
                    };
                    roads.Add(new Road(0, "Balkan road", "E-69", balkanStations));

                    List<Station> chineseStations = new List<Station>
                    {
                         existingStations.Where(x => x.Name == "Huochezhan").First()
                    };

                    roads.Add(new Road(0, "West China railway", "CH-X-189", chineseStations));
                    roads.Add(new Road(0, "North Korea rail", "Kim-Jong-None", new List<Station>()));

                    foreach (Road r in roads)
                    {
                        if (existingRoads.Where(x => x.Name == r.Name).Count() == 0) roadsToAdd.Add(r);
                    }

                    dbContext.Roads.AddRange(roadsToAdd);
                    dbContext.SaveChanges();
                    logger.LogNewMessage($"Roads intialized successfully.", LogType.INFO);
                }
            }
            catch (Exception ex)
            {
                logger.LogNewMessage($"Error occured trying to intialize roads. Message {ex.Message}", LogType.ERROR);
            }


        }


        private void InitializeUsers()
        {
            //Initialize users
            logger.LogNewMessage($"Initializing users..", LogType.INFO);
            List<User> users = new List<User>
            {
                new User(0, "Radasin", "admin", "Rakovic", "admin", true),
                new User(0, "Predrag", "pedja", "Glavas", "pedja", true),
                new User(0, "Mihailo", "mihailo", "Vasiljevic", "mihailo", false)
            };

            try
            {
                using (var dbContext = factory.GetContext())
                {

                    logger.LogNewMessage($"Fetching users from repository", LogType.DEBUG);

                    var existingUsers = dbContext.Users.ToList();
                    List<User> usersToAdd = new List<User>();

                    foreach (User u in users)
                    {
                        if (existingUsers.Where(x => x.UserName == u.UserName).Count() == 0) usersToAdd.Add(u);
                    }

                    dbContext.Users.AddRange(usersToAdd);
                    dbContext.SaveChanges();
                    logger.LogNewMessage($"Users intialized successfully.", LogType.INFO);
                }
            }
            catch (Exception ex)
            {
                logger.LogNewMessage($"Error occured trying to intialize users. Message {ex.Message}", LogType.ERROR);
            }
        }

    }//end DataInitializer
}