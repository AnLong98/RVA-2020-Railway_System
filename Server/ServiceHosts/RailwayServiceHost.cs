///////////////////////////////////////////////////////////
//  RailwayServiceHost.cs
//  Implementation of the Class RailwayServiceHost
//  Generated by Enterprise Architect
//  Created on:      30-Jul-2020 3:54:45 PM
//  Original author: Predrag
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.ServiceModel;
using Common.Contracts;
using System.IdentityModel.Selectors;

namespace Server.ServiceHosts
{

    public class RailwayServiceHost
    {

        protected UserNamePasswordValidator authValidator;
        protected BasicHttpBinding binding;
        protected Type contract;
        protected ILogging logger;
        protected string serviceEndpointName;
        protected ServiceHost serviceHost;

        /// 
        /// <param name="serviceEndpointName"></param>
        /// <param name="binding"></param>
        /// <param name="authValidator"></param>
        /// <param name="serviceHost"></param>
        /// <param name="contract"></param>
        /// <param name="logger"></param>
        public RailwayServiceHost(string serviceEndpointName, BasicHttpBinding binding, UserNamePasswordValidator authValidator, ServiceHost serviceHost, Type contract, ILogging logger)
        {
            this.serviceEndpointName = serviceEndpointName;
            this.binding = binding;
            this.authValidator = authValidator;
            this.serviceHost = serviceHost;
            this.contract = contract;
            this.logger = logger;


            this.binding.Security.Mode = BasicHttpSecurityMode.TransportCredentialOnly;
            this.binding.Security.Transport.ClientCredentialType = HttpClientCredentialType.Basic;

            this.serviceHost.Credentials.UserNameAuthentication.UserNamePasswordValidationMode = System.ServiceModel.Security.UserNamePasswordValidationMode.Custom;
            this.serviceHost.Credentials.UserNameAuthentication.CustomUserNamePasswordValidator = authValidator;

            this.serviceHost.AddServiceEndpoint(this.contract, this.binding, this.serviceEndpointName);
        }

        public void CloseServiceChannel()
        {
            try
            {
                logger.LogNewMessage($"Closing service host for host for type {contract}", LogType.INFO);
                serviceHost.Close();
                logger.LogNewMessage($"Successfully closed host for type {contract}", LogType.INFO);
            }
            catch (Exception ex)
            {
                logger.LogNewMessage($"Failed to close service host for type {contract}. ERROR message {ex.Message}", LogType.ERROR);
            }
        }

        public void OpenServiceChannel()
        {
            try
            {
                logger.LogNewMessage($"Trying to open service host for type {contract}", LogType.INFO);
                serviceHost.Open();
                logger.LogNewMessage($"Successfully opened host for type {contract}", LogType.INFO);
            }
            catch (Exception ex)
            {
                logger.LogNewMessage($"Failed to open service host for type {contract}. ERROR message {ex.Message}", LogType.ERROR);
            }
        }

    }//end RailwayServiceHost
}