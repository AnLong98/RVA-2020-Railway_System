///////////////////////////////////////////////////////////
//  PlaceServiceProvider.cs
//  Implementation of the Class PlaceServiceProvider
//  Generated by Enterprise Architect
//  Created on:      30-Jul-2020 3:54:53 PM
//  Original author: Predrag
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.ServiceModel;
using Server.Contracts;
using System.Data.Entity;
using Common.Contracts;
using Common.DomainModels;

namespace Server.ServiceProviders
{
    [ServiceBehavior(InstanceContextMode = InstanceContextMode.Single)]
    public class PlaceServiceProvider : IPlaceService
    {

        private ILogging logger;
        private IDatabaseContextFactory factory;

        /// 
        /// <param name="logger"></param>
        /// <param name="placeRepository"></param>
        public PlaceServiceProvider(ILogging logger, IDatabaseContextFactory factory)
        {
            this.logger = logger;
            this.factory = factory;
        }

        /// 
        /// <param name="place"></param>
        public bool AddPlace(Place place)
        {

            try
            {
                logger.LogNewMessage($"Adding new with name {place.Name} and id {place.Id} to database..", LogType.INFO);
                using (var dbContext = factory.GetContext())
                {
                    dbContext.Places.Attach(place);
                    dbContext.Places.Add(place);
                    dbContext.SaveChanges();
                }
                logger.LogNewMessage($"Place added.", LogType.INFO);
                return true;

            }
            catch (Exception ex)
            {
                logger.LogNewMessage($"Error occured, place couldn't be added. ERROR message : {ex.Message}", LogType.ERROR);
                throw new FaultException(ex.Message);
            }
        }

        /// 
        /// <param name="id"></param>
        public bool DeletePlace(int placeID)
        {

            try
            {
                logger.LogNewMessage($"Deleting place with id '{placeID}' from database..", LogType.INFO);
                using (var dbContext = factory.GetContext())
                {
                    Place placeToDelete = dbContext.Places.Where(X => X.Id == placeID)
                                                          .Include("Country")
                                                          .Single();
                    dbContext.Stations.Where(x => x.Place.Id == placeID)
                                      .Include(x => x.Tracks).Load();
                    dbContext.Places.Attach(placeToDelete);
                    dbContext.Places.Remove(placeToDelete);
                    dbContext.SaveChanges();
                }
                logger.LogNewMessage($"Place deleted.", LogType.INFO);
                return true;

            }
            catch (Exception ex)
            {
                logger.LogNewMessage($"Error occured, place couldn't be deleted.  ERROR message : {ex.Message}", LogType.ERROR);
                throw new FaultException(ex.Message);
            }
        }

        public List<Place> GetAllPlaces()
        {

            try
            {
                logger.LogNewMessage("Getting all places from database.", LogType.INFO);
                using (var dbContext = factory.GetContext())
                {
                    return dbContext.Places.Include("Country").ToList();
                }

            }
            catch (Exception ex)
            {
                logger.LogNewMessage($"Error occured, place couldn't be retrieved.  ERROR message : {ex.Message}", LogType.ERROR);
                throw new FaultException(ex.Message);
            }
        }

        /// 
        /// <param name="id"></param>
        public Place GetPlaceByID(int id)
        {
            try
            {
                logger.LogNewMessage($"Getting place with id '{id}' from database.", LogType.INFO);
                using (var dbContext = factory.GetContext())
                {
                    return dbContext.Places.Find(id);
                }
            }
            catch (Exception ex)
            {
                logger.LogNewMessage($"Error occured getting place by id {id}. Message {ex.Message}", LogType.ERROR);
                throw new FaultException(ex.Message);
            }
        }

        /// 
        /// <param name="newData"></param>
        public bool UpdatePlace(Place newData)
        {

            try
            {
                logger.LogNewMessage($"Updating data for place with id '{newData.Id}'.", LogType.INFO);
                using (var dbContext = factory.GetContext())
                {
                    var existingPlace = dbContext.Places.Where(x => x.Id == newData.Id).Include(c => c.Country).SingleOrDefault();
                    dbContext.Entry(existingPlace).CurrentValues.SetValues(newData);
                    if (existingPlace.Country.Id != newData.Country.Id)
                    {
                        //Attach new country so it is recognized  by dbcontext
                        dbContext.Countries.Attach(newData.Country);
                        existingPlace.Country = newData.Country;
                    }
                    dbContext.SaveChanges();
                }
                return true;

            }
            catch (Exception ex)
            {
                logger.LogNewMessage($"Error occured, place couldn't be updated.  ERROR message : {ex.Message}", LogType.ERROR);
                throw new FaultException(ex.Message);
            }
        }

    }//end PlaceServiceProvider
}