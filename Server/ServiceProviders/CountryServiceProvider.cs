///////////////////////////////////////////////////////////
//  CountryServiceProvider.cs
//  Implementation of the Class CountryServiceProvider
//  Generated by Enterprise Architect
//  Created on:      30-Jul-2020 3:54:53 PM
//  Original author: Predrag
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.ServiceModel;
using Server.Contracts;
using System.Linq;
using Common.Contracts;
using Common.DomainModels;

namespace Server.ServiceProviders
{

    [ServiceBehavior(InstanceContextMode = InstanceContextMode.Single)]
    public class CountryServiceProvider : ICountryService
    {

        private ILogging logger;
        private IDatabaseContextFactory factory;
        /// 
        /// <param name="logger"></param>
        /// <param name="countryRepository"></param>
        public CountryServiceProvider(ILogging logger, IDatabaseContextFactory factory)
        {
            this.logger = logger;
            this.factory = factory;
        }

        /// 
        /// <param name="id"></param>
        public Country GeCountryByID(int id)
        {
            try
            {
                logger.LogNewMessage($"Getting country by id {id}.", LogType.INFO);
                using (var dbContext = factory.GetContext())
                {
                    return dbContext.Countries.Find(id);
                }
            }
            catch (Exception ex)
            {
                logger.LogNewMessage($"Error occured getting country by id {id}. Message {ex.Message}", LogType.ERROR);
                throw new FaultException(ex.Message);
            }

        }

        /// 
        /// <param name="name"></param>
        public Country GetCountryByName(string name)
        {
            try
            {
                logger.LogNewMessage($"Getting country by name {name}.", LogType.INFO);
                using (var dbContext = factory.GetContext())
                {
                    return dbContext.Countries.Where(t => t.Name == name).Single();
                }
            }
            catch (Exception ex)
            {
                logger.LogNewMessage($"Error occured getting country by name {name}. Message {ex.Message}", LogType.ERROR);
                throw new FaultException(ex.Message);
            }

        }

        public List<Country> GetAll()
        {
            try
            {
                logger.LogNewMessage($"Getting all countries from the database.", LogType.INFO);
                using (var dbContext = factory.GetContext())
                {
                    return dbContext.Countries.ToList();
                }
            }
            catch (Exception ex)
            {
                logger.LogNewMessage($"Error occured getting all countries. Message {ex.Message}", LogType.ERROR);
                throw new FaultException(ex.Message);
            }

        }
    }//end CountryServiceProvider
}