///////////////////////////////////////////////////////////
//  TrackServiceProvider.cs
//  Implementation of the Class TrackServiceProvider
//  Generated by Enterprise Architect
//  Created on:      30-Jul-2020 3:54:53 PM
//  Original author: Predrag
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.ServiceModel;
using Server.Contracts;
using Common.Contracts;
using Common.DomainModels;

namespace Server.ServiceProviders
{

    [ServiceBehavior(InstanceContextMode = InstanceContextMode.Single)]
    public class TrackServiceProvider : ITrackService
    {

        private ILogging logger;
        private IDatabaseContextFactory factory;

        /// 
        /// <param name="logger"></param>
        /// <param name="trackRepository"></param>
        public TrackServiceProvider(ILogging logger, IDatabaseContextFactory factory)
        {
            this.logger = logger;
            this.factory = factory;
        }

        /// 
        /// <param name="track"></param>
        public bool AddTrack(Track track)
        {

            try
            {
                logger.LogNewMessage($"Adding new track to the database", LogType.INFO);
                using (var dbContext = factory.GetContext())
                {
                    dbContext.Track.Attach(track);
                    dbContext.Track.Add(track);
                    dbContext.SaveChanges();
                }
                logger.LogNewMessage($"Track added successfully.", LogType.INFO);
                return true;

            }
            catch (Exception ex)
            {
                logger.LogNewMessage($"Error occured, track couldn't be added. Message {ex.Message}", LogType.ERROR);
                throw new FaultException(ex.Message);
            }
        }

        /// 
        /// <param name="trackID"></param>
        public bool DeleteTrack(int trackID)
        {

            try
            {
                logger.LogNewMessage($"Deleting track with id {trackID} fom the database", LogType.INFO);
                using (var dbContext = factory.GetContext())
                {
                    Track track = new Track() { Id = trackID };
                    dbContext.Track.Attach(track);
                    dbContext.Track.Remove(track);
                    dbContext.SaveChanges();
                }
                logger.LogNewMessage($"Track deleted successfully.", LogType.INFO);
                return true;

            }
            catch (Exception ex)
            {
                logger.LogNewMessage($"Error occured, track couldn't be deleted. Message {ex.Message}", LogType.ERROR);
                throw new FaultException(ex.Message);
            }
        }

        public List<Track> GetAllTracks()
        {

            try
            {
                logger.LogNewMessage($"Getting all tracks from the database.", LogType.INFO);
                using (var dbContext = factory.GetContext())
                {
                    return dbContext.Track.ToList();
                }
            }
            catch (Exception ex)
            {
                logger.LogNewMessage($"Error occured, tracks couldn't be retrieved. Message {ex.Message}", LogType.ERROR);
                throw new FaultException(ex.Message);
            }

        }

        /// 
        /// <param name="id"></param>
        public Track GetTrackByID(int id)
        {
            try
            {
                logger.LogNewMessage($"Getting track with id {id} from the database.", LogType.INFO);
                using (var dbContext = factory.GetContext())
                {
                    return dbContext.Track.Find(id);
                }
            }
            catch (Exception ex)
            {
                logger.LogNewMessage($"Error occured, track couldn't be retrieved. Message {ex.Message}", LogType.ERROR);
                return null;
            }

        }

        /// 
        /// <param name="newData"></param>
        public bool UpdateTrack(Track newData)
        {

            try
            {
                logger.LogNewMessage($"Updating track with id {newData.Id}", LogType.INFO);
                using (var dbContext = factory.GetContext())
                {
                    dbContext.Entry(dbContext.Track.Find(newData.Id)).CurrentValues.SetValues(newData);
                    dbContext.SaveChanges();

                }
                logger.LogNewMessage($"Track updated successfully.", LogType.INFO);
                return true;

            }
            catch (Exception ex)
            {
                logger.LogNewMessage($"Error occured, track couldn't be updated. Message {ex.Message}", LogType.ERROR);
                throw new FaultException(ex.Message);
            }
        }

        public List<Track> GetUnattachedTracks()
        {
            try
            {
                logger.LogNewMessage($"Getting all unattached tracks from the database.", LogType.INFO);
                using (var dbContext = factory.GetContext())
                {
                    return dbContext.Track.Where(x => x.StationId == null).ToList();
                }
            }
            catch (Exception ex)
            {
                logger.LogNewMessage($"Error occured, tracks couldn't be retrieved. Message {ex.Message}", LogType.ERROR);
                throw new FaultException(ex.Message);
            }
        }

    }//end TrackServiceProvider
}