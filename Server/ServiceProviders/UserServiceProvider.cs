///////////////////////////////////////////////////////////
//  UserServiceProvider.cs
//  Implementation of the Class UserServiceProvider
//  Generated by Enterprise Architect
//  Created on:      30-Jul-2020 3:54:54 PM
//  Original author: Predrag
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.ServiceModel;
using System.Linq;
using Server.Contracts;
using Common.Contracts;
using Common.DomainModels;

namespace Server.ServiceProviders
{

    [ServiceBehavior(InstanceContextMode = InstanceContextMode.Single)]
    public class UserServiceProvider : IUserService
    {

        private ILogging logger;
        private IDatabaseContextFactory factory;

        /// 
        /// <param name="logger"></param>
        /// <param name="userRepository"></param>
        public UserServiceProvider(ILogging logger, IDatabaseContextFactory factory)
        {
            this.logger = logger;
            this.factory = factory;
        }

        /// 
        /// <param name="user"></param>
        public bool AddUser(User user)
        {


            try
            {
                logger.LogNewMessage($"Adding new user with username {user.UserName} to the database", LogType.INFO);
                using (var dbContext = factory.GetContext())
                {
                    dbContext.Users.Add(user);
                    dbContext.SaveChanges();
                }
                logger.LogNewMessage($"User added successfully.", LogType.INFO);
                return true;

            }
            catch (Exception ex)
            {
                logger.LogNewMessage($"Error occured, user couldn't be added. Message {ex.Message}", LogType.ERROR);
                throw new FaultException(ex.Message);
            }
        }

        /// 
        /// <param name="name"></param>
        public User FindUserByUserName(string name)
        {

            try
            {
                logger.LogNewMessage($"Trying to get user with name {name} from the database", LogType.INFO);
                using (var dbContext = factory.GetContext())
                {
                    return dbContext.Users.SingleOrDefault(u => u.UserName == name);
                }

            }
            catch (Exception ex)
            {
                logger.LogNewMessage($"Error occured, user couldn't be found. Message {ex.Message}", LogType.ERROR);
                throw new FaultException(ex.Message);
            }
        }

        /// 
        /// <param name="id"></param>
        public User GetUserData(int id)
        {
            try
            {
                logger.LogNewMessage($"Trying to get user with id {id} for the database", LogType.INFO);
                using (var dbContext = factory.GetContext())
                {
                    return dbContext.Users.Find(id);
                }

            }
            catch (Exception ex)
            {
                logger.LogNewMessage($"Error occured, user couldn't be found. Message {ex.Message}", LogType.ERROR);
                throw new FaultException(ex.Message);
            }
        }

        /// 
        /// <param name="id"></param>
        /// <param name="newName"></param>
        /// <param name="newLastName"></param>
        public bool UpdateUser(int id, string newName, string newLastName)
        {

            try
            {
                logger.LogNewMessage($"Trying to update user with id {id}", LogType.INFO);
                using (var dbContext = factory.GetContext())
                {
                    User user = dbContext.Users.Find(id);
                    user.Name = newName;
                    user.LastName = newLastName;
                    dbContext.SaveChanges();
                }
                logger.LogNewMessage($"User updated successfully.", LogType.INFO);
                return true;

            }
            catch (Exception ex)
            {
                logger.LogNewMessage($"Error occured, user data couldn't be updated. Message {ex.Message}", LogType.ERROR);
                throw new FaultException(ex.Message);
            }
        }

        public List<User> GetAllUsers()
        {
            try
            {
                logger.LogNewMessage($"Retrieving all users..", LogType.INFO);
                using (var dbContext = factory.GetContext())
                {
                    return dbContext.Users.ToList();
                }

            }
            catch (Exception ex)
            {
                logger.LogNewMessage($"Error occured, users couldn't be retrieved. Message {ex.Message}", LogType.ERROR);
                throw new FaultException(ex.Message);
            }
        }
    }//end UserServiceProvider
}