///////////////////////////////////////////////////////////
//  StationServiceProvider.cs
//  Implementation of the Class StationServiceProvider
//  Generated by Enterprise Architect
//  Created on:      30-Jul-2020 3:54:53 PM
//  Original author: Predrag
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Data.Entity;
using System.ServiceModel;
using Server.Contracts;
using Common.Contracts;
using Common.DomainModels;

namespace Server.ServiceProviders
{

    [ServiceBehavior(InstanceContextMode = InstanceContextMode.Single)]
    public class StationServiceProvider : IStationService
    {

        private ILogging logger;
        private IDatabaseContextFactory factory;

        /// 
        /// <param name="logger"></param>
        /// <param name="stationRespository"></param>
        public StationServiceProvider(ILogging logger, IDatabaseContextFactory factory)
        {

            this.logger = logger;
            this.factory = factory;
        }

        /// 
        /// <param name="station"></param>
        public bool AddStation(Station station)
        {

            try
            {
                logger.LogNewMessage($"Adding new station to database", LogType.INFO);
                using (var dbContext = factory.GetContext())
                {
                    foreach (Track track in station.Tracks)
                    {
                        dbContext.Track.Attach(track);
                        track.StationId = station.Id;

                    }
                    dbContext.Stations.Attach(station);
                    dbContext.Places.Attach(station.Place);
                    dbContext.Stations.Add(station);
                    dbContext.SaveChanges();
                }
                logger.LogNewMessage($"Station added successfully.", LogType.INFO);
                return true;

            }
            catch (Exception ex)
            {
                logger.LogNewMessage($"Error occured, station couldn't be added. Message {ex.Message}", LogType.ERROR);
                throw new FaultException(ex.Message);
            }
        }

        /// 
        /// <param name="newData"></param>
        public bool ChangeStation(Station newData)
        {

            try
            {
                logger.LogNewMessage($"Changing station with id {newData.Id}", LogType.INFO);
                using (var dbContext = factory.GetContext())
                {
                    var station = dbContext.Stations.Where(p => p.Id == newData.Id)
                                                .Include(p => p.Tracks)
                                                .Include(p => p.Place)
                                                .SingleOrDefault();
                    dbContext.Entry(station).CurrentValues.SetValues(newData);

                    // Delete children
                    foreach (var existingTrack in station.Tracks.ToList())
                    {
                        if (!newData.Tracks.Any(c => c.Id == existingTrack.Id))
                            station.Tracks.Remove(existingTrack);
                    }
                    //Add children
                    foreach (var track in newData.Tracks)
                    {
                        if (!station.Tracks.Any(x => x.Id == track.Id))
                        {
                            dbContext.Track.Attach(track);
                            station.Tracks.Add(track);
                        }
                    }
                    //Add Place child
                    if (station.Place != null && station.Place.Id != newData.Place.Id)
                    {
                        dbContext.Places.Attach(newData.Place);
                        station.Place = newData.Place;
                    }

                    dbContext.SaveChanges();
                }
                logger.LogNewMessage($"Station updated successfully.", LogType.INFO);
                return true;

            }
            catch (Exception ex)
            {
                logger.LogNewMessage($"Error occured, station couldn't be updated. Message {ex.Message}", LogType.ERROR);
                throw new FaultException(ex.Message);
            }
        }

        /// 
        /// <param name="id"></param>
        public bool DeleteStation(int stationID)
        {

            try
            {
                logger.LogNewMessage($"Deleting station with id {stationID} from database", LogType.INFO);
                using (var dbContext = factory.GetContext())
                {
                    Station stationToDelete = dbContext.Stations.Where(x => x.Id == stationID).Include("Tracks").Single();
                    dbContext.Stations.Attach(stationToDelete);
                    dbContext.Stations.Remove(stationToDelete);
                    dbContext.SaveChanges();

                }
                logger.LogNewMessage($"Station deleted successfully.", LogType.INFO);
                return true;

            }
            catch (Exception ex)
            {
                logger.LogNewMessage($"Error occured, station couldn't be deleted. Message {ex.Message}", LogType.ERROR);
                throw new FaultException(ex.Message);
            }
        }

        public List<Station> GetAllStations()
        {
            try
            {
                logger.LogNewMessage($"Getting all stations from the database.", LogType.INFO);
                using (var dbContext = factory.GetContext())
                {
                    return dbContext.Stations.Include("Place").Include("Tracks").ToList();
                }

            }
            catch (Exception ex)
            {
                logger.LogNewMessage($"Error occured, stations couldn't be retrieved. Message {ex.Message}", LogType.ERROR);
                throw new FaultException(ex.Message);
            }

        }

        /// 
        /// <param name="id"></param>
        public Station GetStationByID(int id)
        {
            try
            {
                logger.LogNewMessage($"Getting station with id {id} from database", LogType.INFO);
                using (var dbContext = factory.GetContext())
                {
                    return dbContext.Stations.Find(id);
                }
            }
            catch (Exception ex)
            {
                logger.LogNewMessage($"Error occured, station couldn't be retrieved. Message {ex.Message}", LogType.ERROR);
                throw new FaultException(ex.Message);
            }

        }

    }//end StationServiceProvider
}